/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package viewer;

import java.sql.ResultSet;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author pc
 */
public class before_train_att_prac extends javax.swing.JDialog {

    /**
     * Creates new form before_train_att_prac
     */
    public before_train_att_prac(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        Date date = new Date();
        String currentyear = dateFormat.format(date);
        txt_date.setText(currentyear);
        split();
        getVehicleNo();
        DefaultTableModel dtmload = (DefaultTableModel) tbl_practical.getModel();
        dtmload.setRowCount(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtAdmissionNo = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtVclass = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtGearTYpe = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtBarcode = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txt_instructor_barcode = new javax.swing.JTextField();
        jCheckBox1 = new javax.swing.JCheckBox();
        txt_instructor_name = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txt_vehicle = new javax.swing.JTextField();
        cmbVno = new javax.swing.JComboBox();
        chk_motorcycle = new javax.swing.JCheckBox();
        chk_3Wheel = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        txt_date = new javax.swing.JFormattedTextField();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_practical = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        cmb_bus_ful_part = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Admission No");

        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Name");

        jLabel3.setText("V Class");

        jLabel4.setText("Type");

        jLabel5.setText("Barcode");

        jLabel7.setText("Instructor Barcode");

        txt_instructor_barcode.setEditable(false);
        txt_instructor_barcode.setEnabled(false);
        txt_instructor_barcode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_instructor_barcodeKeyReleased(evt);
            }
        });

        jCheckBox1.setText("Active");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        txt_instructor_name.setEnabled(false);

        jLabel8.setText("Name");

        jLabel9.setText("Vehicle");

        txt_vehicle.setEnabled(false);

        chk_motorcycle.setText("M Cycle");

        chk_3Wheel.setText("3 Wheel");

        jLabel6.setText("Date");

        txt_date.setEditable(false);
        try {
            txt_date.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("####-##-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jButton2.setText("Save");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        tbl_practical.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"-", "Topi 1", "-", "-", "-", "V1", "Mr.Nimal", null, null},
                {"-", "Topic 2", "-", "-", "-", "V1", "Mr.Vijitha", null, null},
                {"-", "Topic 3", "-", "-", "-", "V2", "Mr.Nimal", null, null},
                {"-", "Topic 4", "-", "-", "-", "v3", "Mr.Nimal", null, null},
                {"-", "Topic 5", "-", "-", "-", "v2", "Mr.Nimal", null, null},
                {"-", "-", "-", "-", "-", "-", "-", null, null},
                {"-", "-", "-", "-", "-", "-", "-", null, null},
                {"-", "-", "-", "-", "-", "-", "-", null, null},
                {"-", "-", "-", "-", "-", "-", "-", null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Date", "Topic", "Starting Time", "Ending Time", "Duration", "Vehicle", "Name of the Lecture", "id", "V Cat"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tbl_practical);

        jLabel10.setText("Bus(D)");

        cmb_bus_ful_part.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "FullTime", "PartTime" }));
        cmb_bus_ful_part.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmb_bus_ful_partItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(txt_date, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 225, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(txtVclass, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(txtGearTYpe, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(txtBarcode, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(124, Short.MAX_VALUE))
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(txtAdmissionNo, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton1)
                                .addGap(18, 18, 18)
                                .addComponent(jButton2))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_instructor_barcode, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jCheckBox1)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txt_instructor_name, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txt_vehicle, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(cmbVno, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(chk_motorcycle)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(chk_3Wheel)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel10)
                                .addGap(18, 18, 18)
                                .addComponent(cmb_bus_ful_part, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txt_instructor_barcode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox1)
                    .addComponent(jLabel8)
                    .addComponent(txt_instructor_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(txt_vehicle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbVno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chk_motorcycle)
                    .addComponent(chk_3Wheel)
                    .addComponent(jLabel10)
                    .addComponent(cmb_bus_ful_part, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(txtVclass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(txtGearTYpe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(txtBarcode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(txt_date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtAdmissionNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            ResultSet rs = model.db.getData("SELECT\n"
                    + "uniquecustomerdetails.namewithinitial,\n"
                    + "customer_register.vehicle_class,\n"
                    + "customer_register.manualOrAuto,\n"
                    + "customer_register.barcode,\n"
                    + "customer_register.id \n"
                    + "FROM\n"
                    + "customer_register ,\n"
                    + "uniquecustomerdetails\n"
                    + "WHERE\n"
                    + "uniquecustomerdetails.id = customer_register.uniqueCustomerDetails_id AND\n"
                    + "customer_register.admission_no = '" + txtAdmissionNo.getText() + "'");

            if (rs.next()) {
                txtName.setText(rs.getString(1));
                txtVclass.setText(rs.getString(2));
                txtGearTYpe.setText(rs.getString(3));
                txtBarcode.setText(rs.getString(4));
                cus_id = rs.getInt(5);

                String full = txtVclass.getText();
                String[] a = full.split(" ");
                int i;
                String a1 = null;
                for (i = 0; i < a.length; i++) {
                    a1 = a[i];
                    System.out.println(a1);
                    if (a[i].equals("A")) {
                        System.out.println("A = A");

                        DefaultTableModel dtm = (DefaultTableModel) tbl_practical.getModel();

                        // dtm.setRowCount(0);
                        for (int j = 0; j < 3; j++) {
                            String date[] = {"-", "-", "-"};
                            String topic[] = {"Move Over and Stopping(M Cycle)",
                                "Zig Zag and 8(M Cycle)",
                                "Zig Zag and 8(M Cycle)"};
                            String starting_time[] = {"-", "-", "-"};
                            String ending_time[] = {"-", "-", "-"};
                            String duration[] = {"-", "-", "-"};
                            String vehicle[] = {"-", "-", "-"};
                            String instructor[] = {"-", "-", "-"};
                            String tid[] = {"-", "-", "-"};
                            String vcat[] = {"A", "A", "A"};

                            Object arr[] = {date[j], topic[j], starting_time[j], ending_time[j], duration[j], vehicle[j], instructor[j], tid[j], vcat[j]};
                            dtm.addRow(arr);

                        }
                    }
                    if (a[i].equals("A1")) {
                        System.out.println("A1 = A1");

                    }
                    if (a[i].equals("B") && txtGearTYpe.getText().equals("Manual")) {
                        System.out.println("B = B");
                        DefaultTableModel dtm = (DefaultTableModel) tbl_practical.getModel();

                        // dtm.setRowCount(0);
                        for (int j = 0; j < 18; j++) {
                            String date[] = {"-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"};
                            String topic[] = {"Manual Stimulator(Indoor)",
                                "Move Over and Stopping",
                                "Move Over and Stopping",
                                "Clutch Balancing",
                                "Shifting Gears",
                                "Using Mirrors and Hand Signals",
                                "Obsservation/Dicisions",
                                "Positioning and Parking",
                                "Reversing/Straight",
                                "Using Round About",
                                "Reversing 90",
                                "Driving in Traffic",
                                "Turning to a by Road",
                                "Entering to a main road",
                                "Overtaking",
                                "Reversing and Parking",
                                "Reversing and Parking",
                                "Using Junctions"};
                            String starting_time[] = {"-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"};
                            String ending_time[] = {"-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"};
                            String duration[] = {"-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"};
                            String vehicle[] = {"-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"};
                            String instructor[] = {"-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"};
                            String tid[] = {"-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"};
                            String vcat[] = {"B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B"};

                            Object arr[] = {date[j], topic[j], starting_time[j], ending_time[j], duration[j], vehicle[j], instructor[j], tid[j], vcat[j]};
                            dtm.addRow(arr);

                        }
                    } else if (a[i].equals("B") && txtGearTYpe.getText().equals("Auto")) {
                        System.out.println("B = B");
                        DefaultTableModel dtm = (DefaultTableModel) tbl_practical.getModel();

                        // dtm.setRowCount(0);
                        for (int j = 0; j < 18; j++) {
                            String date[] = {"-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"};
                            String topic[] = {" Manual Stimulator(Indoor)",
                                "Move Over and Stopping",
                                "Move Over and Stopping",
                                "Selecting Gears",
                                "Using Mirrors and Hand Signals",
                                "Obsservation/Dicisions",
                                "Positioning and Parking",
                                "Positioning and Parking",
                                "Reversing/Straight",
                                "Using Round About",
                                "Reversing 90",
                                "Driving in Traffic",
                                "Turning to a by Road",
                                "Entering to a main road",
                                "Overtaking",
                                "Reversing and Parking",
                                "Reversing and Parking",
                                "Using Junctions"};
                            String starting_time[] = {"-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"};
                            String ending_time[] = {"-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"};
                            String duration[] = {"-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"};
                            String vehicle[] = {"-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"};
                            String instructor[] = {"-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"};
                            String tid[] = {"-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"};
                            String vcat[] = {"B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B", "B"};

                            Object arr[] = {date[j], topic[j], starting_time[j], ending_time[j], duration[j], vehicle[j], instructor[j], tid[j], vcat[j]};
                            dtm.addRow(arr);
                        }

                    }
                    if (a[i].equals("B1")) {
                        System.out.println("B1 = B1");

                        DefaultTableModel dtm = (DefaultTableModel) tbl_practical.getModel();

                        // dtm.setRowCount(0);
                        for (int j = 0; j < 5; j++) {
                            String date[] = {"-", "-", "-"};
                            String topic[] = {" Starting and Move over(3 Wheeler)",
                                "Positioning/Junctions(3 Wheeler)",
                                "Reversing(3 Wheeler)"};
                            String starting_time[] = {"-", "-", "-"};
                            String ending_time[] = {"-", "-", "-"};
                            String duration[] = {"-", "-", "-"};
                            String vehicle[] = {"-", "-", "-"};
                            String instructor[] = {"-", "-", "-"};
                            String tid[] = {"-", "-", "-"};
                            String vcat[] = {"B1", "B1", "B1"};

                            Object arr[] = {date[j], topic[j], starting_time[j], ending_time[j], duration[j], vehicle[j], instructor[j], tid[j], vcat[j]};
                            dtm.addRow(arr);
                        }
                    }
                    if (a[i].equals("C")) {
                        System.out.println("C = C");

                    }
                    if (a[i].equals("D")) {
                        System.out.println("D = D");

                        DefaultTableModel dtm = (DefaultTableModel) tbl_practical.getModel();

                        // dtm.setRowCount(0);
                        for (int j = 0; j < 18; j++) {
                            String date[] = {"-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"};
                            String topic[] = {"Manual Stimulator(Indoor)",
                                "Move Over and Stopping",
                                "Move Over and Stopping",
                                "Selecting Gears",
                                "Using Mirrors and Hand Signals",
                                "Obsservation/Dicisions",
                                "Positioning and Parking",
                                "Positioning and Parking",
                                "Reversing/Straight",
                                "Using Round About",
                                "Reversing 90",
                                "Driving in Traffic",
                                "Turning to a by Road",
                                "Entering to a main road",
                                "Overtaking",
                                "Reversing and Parking",
                                "Reversing and Parking",
                                "Using Junctions"
                            };
                            String starting_time[] = {"-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"};
                            String ending_time[] = {"-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"};
                            String duration[] = {"-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"};
                            String vehicle[] = {"-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"};
                            String instructor[] = {"-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"};
                            String tid[] = {"-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"};
                            String vcat[] = {"D", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D"};

                            Object arr[] = {date[j], topic[j], starting_time[j], ending_time[j], duration[j], vehicle[j], instructor[j], tid[j], vcat[j]};
                            dtm.addRow(arr);
                        }

                    }
                    if (a[i].equals("E")) {
                        System.out.println("E = E");
                    }
                    if (a[i].equals("G")) {
                        System.out.println("G = G");
                    }

                }

            }
        } catch (Exception e) {
            e.printStackTrace();
        }


    }//GEN-LAST:event_jButton1ActionPerformed

    private void txt_instructor_barcodeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_instructor_barcodeKeyReleased
        try {
            ResultSet rs = model.db.getData("SELECT\n"
                    + "instructor.id,\n"
                    + "instructor.barcode,\n"
                    + "instructor.`name`,\n"
                    + "instructor.vehicle_name\n"
                    + "FROM\n"
                    + "instructor\n"
                    + "WHERE\n"
                    + "instructor.barcode = '" + txt_instructor_barcode.getText() + "'");

            if (rs.next()) {
                txt_instructor_name.setText(rs.getString(3));
                txt_vehicle.setText(rs.getString(4));

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_txt_instructor_barcodeKeyReleased

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        if (txt_instructor_barcode.getText().isEmpty() && jCheckBox1.isSelected()) {
            txt_instructor_barcode.setEditable(true);
            txt_instructor_barcode.setEnabled(true);
            txt_instructor_barcode.grabFocus();
        }

        if (jCheckBox1.isSelected() == false) {
            txt_instructor_barcode.setEditable(false);
            txt_instructor_barcode.setEnabled(false);

        }
        if (jCheckBox1.isSelected()) {
            txt_instructor_barcode.setEditable(true);
            txt_instructor_barcode.setEnabled(true);
            txt_instructor_barcode.grabFocus();
        }

    }//GEN-LAST:event_jCheckBox1ActionPerformed
    int cus_id = 0;
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        //save
        if (txtAdmissionNo.getText().isEmpty() || txtName.getText().isEmpty() || txt_date.getText().isEmpty()) {
            com.Messages.errorjoption("Please fill the data fields");

        } else {

            if (isALreadyExistadmission()) {
//                com.Messages.normaljoption("admission no already exist");

                try {

                    for (int i = 0; i < tbl_practical.getRowCount(); i++) {
                        String id;
                        String date;
                        String topic;
                        String starting_time;
                        String ending_time;
                        String duration;
                        String vehicle;
                        String instructor;
//                   
                        date = tbl_practical.getValueAt(i, 0).toString();
                        topic = tbl_practical.getValueAt(i, 1).toString();
                        starting_time = tbl_practical.getValueAt(i, 2).toString();
                        ending_time = tbl_practical.getValueAt(i, 3).toString();
                        duration = tbl_practical.getValueAt(i, 4).toString();
                        vehicle = tbl_practical.getValueAt(i, 5).toString();
                        instructor = tbl_practical.getValueAt(i, 6).toString();
                        id = tbl_practical.getValueAt(i, 7).toString();
//                   

                        model.db.putData("UPDATE practical_topics set date='" + date + "',name='" + topic + "',starting_time='" + starting_time + "',"
                                + "ending_time='" + ending_time + "',duration_of_time='" + duration + "',vehicle='" + vehicle + "',"
                                + "instructor='" + instructor + "',status='" + 2 + "' WHERE id='" + id + "'");
//                        com.Messages.normaljoption("data updated test");

                    }

//                    com.Messages.normaljoption("Data Updated");
                } catch (Exception e) {
                    e.printStackTrace();
                }

            } else {
                try {
                    model.db.putData("INSERT INTO attendance_practical(barcode,admission,status,customer_register_id)values"
                            + "('" + txtBarcode.getText() + "','" + txtAdmissionNo.getText() + "','" + 1 + "','" + cus_id + "')");

                    int maxid = 0;
                    ResultSet rs = model.db.getData("SELECT\n"
                            + "MAX(attendance_practical.id)\n"
                            + "FROM\n"
                            + "attendance_practical");

                    if (rs.next()) {
                        maxid = rs.getInt(1);

                    }
                    for (int i = 0; i < tbl_practical.getRowCount(); i++) {
                        String date;
                        String topic;
                        String starting_time;
                        String ending_time;
                        String duration;
                        String vehicle;
                        String instructor;
//                   
                        date = tbl_practical.getValueAt(i, 0).toString();
                        topic = tbl_practical.getValueAt(i, 1).toString();
                        starting_time = tbl_practical.getValueAt(i, 2).toString();
                        ending_time = tbl_practical.getValueAt(i, 3).toString();
                        duration = tbl_practical.getValueAt(i, 4).toString();
                        vehicle = tbl_practical.getValueAt(i, 5).toString();
                        instructor = tbl_practical.getValueAt(i, 6).toString();
//                   
                        model.db.putData("INSERT INTO practical_topics(date,name,starting_time,ending_time,duration_of_time,vehicle,instructor,status,attendance_practical_id)values"
                                + "('" + date + "','" + topic + "','" + starting_time + "','" + ending_time + "','" + duration + "','" + vehicle + "','" + instructor + "','" + 1 + "','" + maxid + "')");

                    }

//                    com.Messages.normaljoption("Data saved");
                } catch (Exception e) {
                    e.printStackTrace();
                }

            }

        }
        // txt_admission_no.setText("");
//        txt_admission_no.selectAll();
//        txt_barcode.setText("");
//        txt_barcode.selectAll();
//        txt_name.setText("");
//        txt_admission_no.grabFocus();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void cmb_bus_ful_partItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmb_bus_ful_partItemStateChanged
        if (cmb_bus_ful_part.getSelectedItem().equals("FullTime")) {
            DefaultTableModel dtm = (DefaultTableModel) tbl_practical.getModel();

            dtm.setRowCount(0);
            for (int j = 0; j < 18; j++) {
                String date[] = {"-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"};
                String topic[] = {"Manual Stimulator(Indoor)",
                    "Move Over and Stopping",
                    "Move Over and Stopping",
                    "Selecting Gears",
                    "Using Mirrors and Hand Signals",
                    "Obsservation/Dicisions",
                    "Positioning and Parking",
                    "Positioning and Parking",
                    "Reversing/Straight",
                    "Using Round About",
                    "Reversing 90",
                    "Driving in Traffic",
                    "Turning to a by Road",
                    "Entering to a main road",
                    "Overtaking",
                    "Reversing and Parking",
                    "Reversing and Parking",
                    "Using Junctions"};
                String starting_time[] = {"-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"};
                String ending_time[] = {"-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"};
                String duration[] = {"-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"};
                String vehicle[] = {"-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"};
                String instructor[] = {"-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"};
                String tid[] = {"-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"};
                String vcat[] = {"D", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D", "D"};

                Object arr[] = {date[j], topic[j], starting_time[j], ending_time[j], duration[j], vehicle[j], instructor[j], tid[j], vcat[j]};
                dtm.addRow(arr);
            }

        } else if (cmb_bus_ful_part.getSelectedItem().equals("PartTime")) {
            DefaultTableModel dtm = (DefaultTableModel) tbl_practical.getModel();

            dtm.setRowCount(0);
            for (int j = 0; j < 5; j++) {
                String date[] = {"-", "-", "-", "-", "-"};
                String topic[] = {"Move Over and Stopping",
                    "Clutch Balancing",
                    "Shifting Gears",
                    "Using Mirrors and Hand Signals",
                    "Reversing and Parking"};
                String starting_time[] = {"-", "-", "-", "-", "-"};
                String ending_time[] = {"-", "-", "-", "-", "-"};
                String duration[] = {"-", "-", "-", "-", "-"};
                String vehicle[] = {"-", "-", "-", "-", "-"};
                String instructor[] = {"-", "-", "-", "-", "-"};
                String tid[] = {"-", "-", "-", "-", "-"};
                String vcat[] = {"D", "D", "D", "D", "D"};

                Object arr[] = {date[j], topic[j], starting_time[j], ending_time[j], duration[j], vehicle[j], instructor[j], tid[j], vcat[j]};
                dtm.addRow(arr);
            }

        }
    }//GEN-LAST:event_cmb_bus_ful_partItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(before_train_att_prac.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(before_train_att_prac.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(before_train_att_prac.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(before_train_att_prac.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                before_train_att_prac dialog = new before_train_att_prac(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox chk_3Wheel;
    private javax.swing.JCheckBox chk_motorcycle;
    private javax.swing.JComboBox cmbVno;
    private javax.swing.JComboBox cmb_bus_ful_part;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbl_practical;
    private javax.swing.JTextField txtAdmissionNo;
    private javax.swing.JTextField txtBarcode;
    private javax.swing.JTextField txtGearTYpe;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtVclass;
    private javax.swing.JFormattedTextField txt_date;
    private javax.swing.JTextField txt_instructor_barcode;
    private javax.swing.JTextField txt_instructor_name;
    private javax.swing.JTextField txt_vehicle;
    // End of variables declaration//GEN-END:variables

    private void split() {
        String full = txtVclass.getText();
        String[] a = full.split(" ");
        for (int i = 0; i < a.length; i++) {
            String a1 = a[i];
            System.out.println(a1);

        }
    }

    private void getVehicleNo() {
        try {
            cmbVno.removeAllItems();
            cmbVno.addItem("Select V No");
            ResultSet rs = model.db.getData("SELECT\n"
                    + "instructor.id,\n"
                    + "instructor.vehicle_name\n"
                    + "FROM\n"
                    + "instructor");
            while (rs.next()) {
                cmbVno.addItem(rs.getString(2));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    int practical_topic_id = 0;

    private boolean isALreadyExistadmission() {
        boolean bol = false;
        try {
            ResultSet rs = model.db.getData("SELECT\n"
                    + "attendance_practical.admission,\n"
                    + "attendance_practical.id\n"
                    + "FROM\n"
                    + "attendance_practical\n"
                    + "WHERE\n"
                    + "attendance_practical.admission = '" + txtAdmissionNo.getText() + "'");
            if (rs.next()) {
                practical_topic_id = rs.getInt(2);
//                com.Messages.normaljoption("practical_topic_id " + practical_topic_id);
                bol = true;
//                Messages.errorjoption("This NIC Number Already Exist ! ");
//                txtnic.grabFocus();
//                txtnic.selectAll();
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

        return bol;
    }
}
