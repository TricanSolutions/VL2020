/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package viewer;

import com.Messages;
import com.userstatus;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Lasitha Ranawaka
 */
public class practicalExamDetails extends javax.swing.JDialog {

    /**
     * Creates new form template
     */
    public practicalExamDetails(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        loadtabl();
        txtadmissiono.grabFocus();
        txtadmissiono.selectAll();
    }

    practicalExamDetails(String adno, String name, int id, boolean b) {
        initComponents();
        txtadmissiono.grabFocus();
        txtadmissiono.selectAll();
//        txtexamdate.grabFocus();
        txtadmissiono.setText(adno);
        txtname.setText(name);
        cusid = id;
        System.out.println(cusid);
        loadtabl();
    }
    int cusid;
    int writtenexamid;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtadmissiono = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtname = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        txt_findByDMTBarcode = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        txtid = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtexamdate = new javax.swing.JFormattedTextField();
        lbla = new javax.swing.JLabel();
        cmba = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        lblb = new javax.swing.JLabel();
        cmbb = new javax.swing.JComboBox();
        lblb1 = new javax.swing.JLabel();
        cmbb1 = new javax.swing.JComboBox();
        lblg = new javax.swing.JLabel();
        cmbg = new javax.swing.JComboBox();
        lbld = new javax.swing.JLabel();
        cmbd = new javax.swing.JComboBox();
        lblce = new javax.swing.JLabel();
        cmbce = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        cmboptionall = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setBackground(new java.awt.Color(255, 51, 51));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 51));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Practical Exam Details");
        jLabel1.setOpaque(true);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Search"));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 153, 0));
        jLabel3.setText("By Admission No");

        txtadmissiono.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtadmissiono.setForeground(new java.awt.Color(0, 0, 204));
        txtadmissiono.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtadmissionoActionPerformed(evt);
            }
        });
        txtadmissiono.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtadmissionoKeyPressed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 153, 0));
        jLabel4.setText("Name");

        txtname.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtname.setForeground(new java.awt.Color(0, 0, 204));

        jButton2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton2.setForeground(new java.awt.Color(153, 0, 153));
        jButton2.setText("Find");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 153, 0));
        jLabel7.setText("By DMT Barcode");

        txt_findByDMTBarcode.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txt_findByDMTBarcode.setForeground(new java.awt.Color(0, 0, 204));
        txt_findByDMTBarcode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_findByDMTBarcodeKeyPressed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton3.setForeground(new java.awt.Color(153, 0, 153));
        jButton3.setText("Find");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(txtadmissiono, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addComponent(txt_findByDMTBarcode)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(164, 164, 164)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(txtname)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtadmissiono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(txtname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txt_findByDMTBarcode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        tbl.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        tbl.setForeground(new java.awt.Color(0, 0, 204));
        tbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Date", "A", "Status(A)", "B", "Status(B)", "B1", "Status(B1)", "G", "Status(G)", "D", "Status(D)", "CE", "Status(CE)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbl.getTableHeader().setReorderingAllowed(false);
        tbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbl);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Add Details"));

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 153, 51));
        jLabel5.setText("ID");

        txtid.setEditable(false);

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 153, 51));
        jLabel6.setText("Exam Date");

        txtexamdate.setForeground(new java.awt.Color(0, 0, 204));
        try {
            txtexamdate.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("####-##-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtexamdate.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtexamdate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtexamdateKeyPressed(evt);
            }
        });

        lbla.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbla.setForeground(new java.awt.Color(0, 0, 102));
        lbla.setText("A");

        cmba.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cmba.setForeground(new java.awt.Color(153, 0, 153));
        cmba.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--", "None", "Waiting", "Pass", "Fail", "Absent", "Cancel" }));
        cmba.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbaKeyPressed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton1.setForeground(new java.awt.Color(204, 0, 0));
        jButton1.setText("Submit");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        lblb.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblb.setForeground(new java.awt.Color(0, 0, 102));
        lblb.setText("B");

        cmbb.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cmbb.setForeground(new java.awt.Color(153, 0, 153));
        cmbb.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--", "None", "Waiting", "Pass", "Fail", "Absent", "Cancel" }));
        cmbb.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbbKeyPressed(evt);
            }
        });

        lblb1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblb1.setForeground(new java.awt.Color(0, 0, 102));
        lblb1.setText("B1");

        cmbb1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cmbb1.setForeground(new java.awt.Color(153, 0, 153));
        cmbb1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--", "None", "Waiting", "Pass", "Fail", "Absent", "Cancel" }));
        cmbb1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbb1KeyPressed(evt);
            }
        });

        lblg.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblg.setForeground(new java.awt.Color(0, 0, 102));
        lblg.setText("G");

        cmbg.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cmbg.setForeground(new java.awt.Color(153, 0, 153));
        cmbg.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--", "None", "Waiting", "Pass", "Fail", "Absent", "Cancel" }));
        cmbg.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbgKeyPressed(evt);
            }
        });

        lbld.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbld.setForeground(new java.awt.Color(0, 0, 102));
        lbld.setText("D");

        cmbd.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cmbd.setForeground(new java.awt.Color(153, 0, 153));
        cmbd.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--", "None", "Waiting", "Pass", "Fail", "Absent", "Cancel" }));
        cmbd.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbdKeyPressed(evt);
            }
        });

        lblce.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblce.setForeground(new java.awt.Color(0, 0, 102));
        lblce.setText("CE");

        cmbce.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cmbce.setForeground(new java.awt.Color(153, 0, 153));
        cmbce.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--", "None", "Waiting", "Pass", "Fail", "Absent", "Cancel" }));
        cmbce.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbceKeyPressed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 153, 51));
        jLabel2.setText("Select for All");

        cmboptionall.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cmboptionall.setForeground(new java.awt.Color(0, 0, 204));
        cmboptionall.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--", "None", "Waiting", "Pass", "Fail", "Absent", "Cancel" }));
        cmboptionall.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cmboptionallMouseClicked(evt);
            }
        });
        cmboptionall.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmboptionallItemStateChanged(evt);
            }
        });
        cmboptionall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmboptionallActionPerformed(evt);
            }
        });
        cmboptionall.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                cmboptionallPropertyChange(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(txtid))
                    .addComponent(jLabel2))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(cmboptionall, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(txtexamdate, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(lbla)
                        .addGap(18, 18, 18)
                        .addComponent(cmba, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(lblb)
                        .addGap(18, 18, 18)
                        .addComponent(cmbb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblb1)
                        .addGap(18, 18, 18)
                        .addComponent(cmbb1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblg)
                        .addGap(18, 18, 18)
                        .addComponent(cmbg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lbld)
                        .addGap(18, 18, 18)
                        .addComponent(cmbd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblce)
                        .addGap(18, 18, 18)
                        .addComponent(cmbce, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(96, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lbld)
                        .addComponent(cmbd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblg)
                        .addComponent(cmbg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblb1)
                        .addComponent(cmbb1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblce)
                        .addComponent(cmbce, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(txtid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6)
                        .addComponent(txtexamdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lbla)
                        .addComponent(cmba, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblb)
                        .addComponent(cmbb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cmboptionall, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        submit();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        loadtabl();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void tblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMouseClicked
        DefaultTableModel dtm = (DefaultTableModel) tbl.getModel();
        writtenexamid = Integer.valueOf(dtm.getValueAt(tbl.getSelectedRow(), 0).toString());

        txtid.setText(String.valueOf(dtm.getValueAt(tbl.getSelectedRow(), 0)));
        txtexamdate.setText(String.valueOf(dtm.getValueAt(tbl.getSelectedRow(), 1)));

        cmba.setSelectedItem(String.valueOf(dtm.getValueAt(tbl.getSelectedRow(), 3)));
        cmbb.setSelectedItem(String.valueOf(dtm.getValueAt(tbl.getSelectedRow(), 5)));
        cmbb1.setSelectedItem(String.valueOf(dtm.getValueAt(tbl.getSelectedRow(), 7)));
        cmbg.setSelectedItem(String.valueOf(dtm.getValueAt(tbl.getSelectedRow(), 9)));
        cmbd.setSelectedItem(String.valueOf(dtm.getValueAt(tbl.getSelectedRow(), 11)));
        cmbce.setSelectedItem(String.valueOf(dtm.getValueAt(tbl.getSelectedRow(), 13)));
    }//GEN-LAST:event_tblMouseClicked

    private void txtadmissionoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtadmissionoActionPerformed

    }//GEN-LAST:event_txtadmissionoActionPerformed

    private void txtadmissionoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtadmissionoKeyPressed
        if (evt.getKeyCode() == 10) {

            loadtabl();
            txtexamdate.grabFocus();
        }
    }//GEN-LAST:event_txtadmissionoKeyPressed

    private void txtexamdateKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtexamdateKeyPressed
        if (evt.getKeyCode() == 10) {
            cmba.grabFocus();
        }
    }//GEN-LAST:event_txtexamdateKeyPressed

    private void cmbaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbaKeyPressed
        if (evt.getKeyCode() == 10) {
            cmbb.grabFocus();
        }

    }//GEN-LAST:event_cmbaKeyPressed

    private void cmbbKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbbKeyPressed
        if (evt.getKeyCode() == 10) {
            cmbb1.grabFocus();
        }
    }//GEN-LAST:event_cmbbKeyPressed

    private void cmbb1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbb1KeyPressed
        if (evt.getKeyCode() == 10) {
            cmbg.grabFocus();
        }
    }//GEN-LAST:event_cmbb1KeyPressed

    private void cmbgKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbgKeyPressed
        if (evt.getKeyCode() == 10) {
            cmbd.grabFocus();
        }
    }//GEN-LAST:event_cmbgKeyPressed

    private void cmbdKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbdKeyPressed
        if (evt.getKeyCode() == 10) {
            cmbce.grabFocus();
        }
    }//GEN-LAST:event_cmbdKeyPressed

    private void cmbceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbceKeyPressed
        if (evt.getKeyCode() == 10) {
            submit();
        }
    }//GEN-LAST:event_cmbceKeyPressed

    private void cmboptionallItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmboptionallItemStateChanged
        if (cmboptionall.getSelectedIndex() == 1) {
            cmba.setSelectedIndex(1);
            cmbb.setSelectedIndex(1);
            cmbb1.setSelectedIndex(1);
            cmbce.setSelectedIndex(1);
            cmbd.setSelectedIndex(1);
            cmbg.setSelectedIndex(1);

        } else if (cmboptionall.getSelectedIndex() == 2) {
            cmba.setSelectedIndex(2);
            cmbb.setSelectedIndex(2);
            cmbb1.setSelectedIndex(2);
            cmbce.setSelectedIndex(2);
            cmbd.setSelectedIndex(2);
            cmbg.setSelectedIndex(2);

        } else if (cmboptionall.getSelectedIndex() == 3) {
            cmba.setSelectedIndex(3);
            cmbb.setSelectedIndex(3);
            cmbb1.setSelectedIndex(3);
            cmbce.setSelectedIndex(3);
            cmbd.setSelectedIndex(3);
            cmbg.setSelectedIndex(3);

        } else if (cmboptionall.getSelectedIndex() == 4) {
            cmba.setSelectedIndex(4);
            cmbb.setSelectedIndex(4);
            cmbb1.setSelectedIndex(4);
            cmbce.setSelectedIndex(4);
            cmbd.setSelectedIndex(4);
            cmbg.setSelectedIndex(4);

        } else if (cmboptionall.getSelectedIndex() == 5) {
            cmba.setSelectedIndex(5);
            cmbb.setSelectedIndex(5);
            cmbb1.setSelectedIndex(5);
            cmbce.setSelectedIndex(5);
            cmbd.setSelectedIndex(5);
            cmbg.setSelectedIndex(5);

        } else if (cmboptionall.getSelectedIndex() == 6) {
            cmba.setSelectedIndex(6);
            cmbb.setSelectedIndex(6);
            cmbb1.setSelectedIndex(6);
            cmbce.setSelectedIndex(6);
            cmbd.setSelectedIndex(6);
            cmbg.setSelectedIndex(6);

        }

    }//GEN-LAST:event_cmboptionallItemStateChanged

    private void cmboptionallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmboptionallActionPerformed

    }//GEN-LAST:event_cmboptionallActionPerformed

    private void cmboptionallPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_cmboptionallPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_cmboptionallPropertyChange

    private void cmboptionallMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmboptionallMouseClicked

    }//GEN-LAST:event_cmboptionallMouseClicked

    private void txt_findByDMTBarcodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_findByDMTBarcodeKeyPressed
        if (evt.getKeyCode() == 10) {
            findbyDMTBarcode();
        }
    }//GEN-LAST:event_txt_findByDMTBarcodeKeyPressed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        findbyDMTBarcode();
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(practicalExamDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(practicalExamDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(practicalExamDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(practicalExamDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                practicalExamDetails dialog = new practicalExamDetails(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cmba;
    private javax.swing.JComboBox cmbb;
    private javax.swing.JComboBox cmbb1;
    private javax.swing.JComboBox cmbce;
    private javax.swing.JComboBox cmbd;
    private javax.swing.JComboBox cmbg;
    private javax.swing.JComboBox cmboptionall;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbla;
    private javax.swing.JLabel lblb;
    private javax.swing.JLabel lblb1;
    private javax.swing.JLabel lblce;
    private javax.swing.JLabel lbld;
    private javax.swing.JLabel lblg;
    private javax.swing.JTable tbl;
    private javax.swing.JTextField txt_findByDMTBarcode;
    private javax.swing.JTextField txtadmissiono;
    private javax.swing.JFormattedTextField txtexamdate;
    private javax.swing.JTextField txtid;
    private javax.swing.JTextField txtname;
    // End of variables declaration//GEN-END:variables

    private void loadtabl() {
        DefaultTableModel dtm = (DefaultTableModel) tbl.getModel();
        dtm.setRowCount(0);
        try {
            ResultSet rs = model.db.getData("SELECT\n"
                    + "practicalexam.id,\n"
                    + "practicalexam.customer_register_id,\n"
                    + "practicalexam.examDate,\n"
                    + "practicalexam.a,\n"
                    + "practicalexam.a_pass_or_fail,\n"
                    + "practicalexam.b,\n"
                    + "practicalexam.b_pass_or_fail,\n"
                    + "practicalexam.bone,\n"
                    + "practicalexam.bone_pass_or_fail,\n"
                    + "practicalexam.g,\n"
                    + "practicalexam.g_pass_or_fail,\n"
                    + "practicalexam.d,\n"
                    + "practicalexam.d_pass_or_fail,\n"
                    + "practicalexam.ce,\n"
                    + "practicalexam.ce_pass_or_fail,\n"
                    + "uniquecustomerdetails.namewithinitial\n"
                    + "FROM\n"
                    + "practicalexam\n"
                    + "INNER JOIN customer_register ON practicalexam.customer_register_id = customer_register.id\n"
                    + "INNER JOIN uniquecustomerdetails ON customer_register.uniqueCustomerDetails_id = uniquecustomerdetails.id\n"
                    + "WHERE\n"
                    + "customer_register.admission_no = '" + txtadmissiono.getText() + "'");
            while (rs.next()) {
                txtname.setText(rs.getString(16));
                int id = rs.getInt(1);
                String date = rs.getString(3);
                String a = rs.getString(4);
                String apass = rs.getString(5);
                String b = rs.getString(6);
                String bpass = rs.getString(7);
                String b1 = rs.getString(8);
                String b1pass = rs.getString(9);
                String g = rs.getString(10);
                String gpass = rs.getString(11);
                String d = rs.getString(12);
                String dpass = rs.getString(13);
                String ce = rs.getString(14);
                String cepass = rs.getString(15);

                Object o[] = {id, date, a, apass, b, bpass, b1, b1pass, g, gpass, d, dpass, ce, cepass};
                dtm.addRow(o);

            }

        } catch (Exception e) {
            e.printStackTrace();
        }

        try {
            ResultSet rs = model.db.getData("SELECT\n"
                    + "customer_register.id,\n"
                    + "uniquecustomerdetails.namewithinitial\n"
                    + "FROM\n"
                    + "customer_register\n"
                    + "INNER JOIN uniquecustomerdetails ON customer_register.uniqueCustomerDetails_id = uniquecustomerdetails.id\n"
                    + "WHERE\n"
                    + "customer_register.admission_no = '" + txtadmissiono.getText().trim() + "'");
            while (rs.next()) {
                txtname.setText(rs.getString(2));
                cusid = rs.getInt(1);

            }

        } catch (Exception e) {
            e.printStackTrace();

        }

//        try {
//            ResultSet rs = model.db.getData("SELECT\n"
//                    + "customer_register.vehicle_class\n"
//                    + "FROM\n"
//                    + "customer_register\n"
//                    + "WHERE\n"
//                    + "customer_register.admission_no = '" + txtadmissiono.getText().trim() + "'");
//
//           while(rs.next()) {
//                String vclass = rs.getString(1);
//                String x1= vclass.substring(0);
//                String x2 = vclass.substring(1);
//                String x3 = vclass.substring(2);
//               
//                Messages.normaljoption(x1);
//               
//
//            }
//
//        } catch (Exception e) {
//            e.printStackTrace();
//
//        }

        txtexamdate.grabFocus();
    }

    private void clear() {
        txtid.setText("");
        txtexamdate.setText("");

        cmba.setSelectedIndex(0);
        cmbb.setSelectedIndex(0);
        cmbb1.setSelectedIndex(0);
        cmbce.setSelectedIndex(0);
        cmbd.setSelectedIndex(0);
        cmbg.setSelectedIndex(0);

    }
    String n;

    private void submit() {

        saveandothers();

    }

    private void saveandothers() {

        if (cmba.getSelectedIndex() == 1) {
            n = "";

        } else {
            n = lbla.getText();

        }

        if (cmbb.getSelectedIndex() == 1) {
            n = "";

        } else {
            n = lblb.getText();

        }

        if (cmbb1.getSelectedIndex() == 1) {
            n = "";

        } else {
            n = lblb1.getText();

        }

        if (cmbg.getSelectedIndex() == 1) {
            n = "";

        } else {
            n = lblg.getText();

        }

        if (cmbd.getSelectedIndex() == 1) {
            n = "";

        } else {
            n = lbld.getText();

        }

        if (cmbce.getSelectedIndex() == 1) {
            n = "";

        } else {
            n = lblce.getText();

        }

        if (cmba.getSelectedIndex() == 0) {
            com.Messages.errorjoption("Select Vehicle class!");
            cmba.grabFocus();
            return;

        } else if (cmbb.getSelectedIndex() == 0) {
            Messages.errorjoption("Select Vehicle class!");
            cmbb.grabFocus();
            return;

        } else if (cmbb1.getSelectedIndex() == 0) {
            Messages.errorjoption("Select Vehicle class!");
            cmbb1.grabFocus();
            return;

        } else if (cmbg.getSelectedIndex() == 0) {
            Messages.errorjoption("Select Vehicle class!");
            cmbg.grabFocus();
            return;

        } else if (cmbd.getSelectedIndex() == 0) {
            Messages.errorjoption("Select Vehicle class!");
            cmbd.grabFocus();
            return;

        } else if (cmbce.getSelectedIndex() == 0) {
            Messages.errorjoption("Select Vehicle class!");
            cmbce.grabFocus();
            return;

        } else {
            if (txtid.getText().isEmpty()) {
                if (!isDateExist()) {
                    try {
                        model.db.putData("INSERT INTO practicalexam(customer_register_id,examDate,a,a_pass_or_fail,b,b_pass_or_fail,bone,bone_pass_or_fail,"
                                + "g,g_pass_or_fail,d,d_pass_or_fail,ce,ce_pass_or_fail)"
                                + "values('" + cusid + "','" + txtexamdate.getText() + "','" + lbla.getText() + "','" + cmba.getSelectedItem() + "',"
                                + "'" + lblb.getText() + "','" + cmbb.getSelectedItem() + "','" + lblb1.getText() + "','" + cmbb1.getSelectedItem() + "',"
                                + "'" + lblg.getText() + "','" + cmbg.getSelectedItem() + "','" + lbld.getText() + "','" + cmbd.getSelectedItem() + "',"
                                + "'" + lblce.getText() + "','" + cmbce.getSelectedItem() + "')");

                        model.db.putData("INSERT INTO log(date,description,username)values(NOW(),'" + "Practicla exam add" + "',"
                                + "'" + userstatus.LodUser + "')");
                        com.Messages.normaljoption("Data Saved!");
                        sendsms();
                        loadtabl();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                } else {
                    com.Messages.errorjoption("Date is already exist");

                }

            } else {
                try {
                    model.db.putData("UPDATE practicalexam set examDate='" + txtexamdate.getText() + "',"
                            + "a_pass_or_fail='" + cmba.getSelectedItem() + "',b_pass_or_fail='" + cmbb.getSelectedItem() + "',"
                            + "bone_pass_or_fail='" + cmbb1.getSelectedItem() + "',g_pass_or_fail='" + cmbg.getSelectedItem() + "',"
                            + "d_pass_or_fail='" + cmbd.getSelectedItem() + "',ce_pass_or_fail='" + cmbce.getSelectedItem() + "',"
                            + "a='" + lbla.getText() + "',b='" + lblb.getText() + "',bone='" + lblb1.getText() + "',g='" + lblg.getText() + "',d='" + lbld.getText() + "',"
                            + "ce='" + lblce.getText() + "' "
                            + "WHERE id='" + txtid.getText() + "' ");

                    model.db.putData("INSERT INTO log(date,description,username)values(NOW(),'" + "practical exam updated" + "',"
                            + "'" + userstatus.LodUser + "')");
                    com.Messages.normaljoption("Data Updated!");
                    loadtabl();
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }

            }

        }
        clear();

    }

    private boolean isDateExist() {
        boolean bol = false;
        String selectDate = txtexamdate.getText();

        for (int i = 0; i < tbl.getRowCount(); i++) {

            String tblDate = tbl.getValueAt(i, 1).toString();

            if (selectDate.equals(tblDate)) {
                //System.out.println("ok "+tblDate);
                bol = true;
                break;
            }

        }

        return bol;
    }

    private void findbyDMTBarcode() {
        DefaultTableModel dtm = (DefaultTableModel) tbl.getModel();
        dtm.setRowCount(0);
        try {
            ResultSet rs = model.db.getData("SELECT\n"
                    + "practicalexam.id,\n"
                    + "practicalexam.customer_register_id,\n"
                    + "practicalexam.examDate,\n"
                    + "practicalexam.a,\n"
                    + "practicalexam.a_pass_or_fail,\n"
                    + "practicalexam.b,\n"
                    + "practicalexam.b_pass_or_fail,\n"
                    + "practicalexam.bone,\n"
                    + "practicalexam.bone_pass_or_fail,\n"
                    + "practicalexam.g,\n"
                    + "practicalexam.g_pass_or_fail,\n"
                    + "practicalexam.d,\n"
                    + "practicalexam.d_pass_or_fail,\n"
                    + "practicalexam.ce,\n"
                    + "practicalexam.ce_pass_or_fail,\n"
                    + "uniquecustomerdetails.namewithinitial,\n"
                    + "customer_register.admission_no \n"
                    + "FROM\n"
                    + "practicalexam\n"
                    + "INNER JOIN customer_register ON practicalexam.customer_register_id = customer_register.id\n"
                    + "INNER JOIN uniquecustomerdetails ON customer_register.uniqueCustomerDetails_id = uniquecustomerdetails.id\n"
                    + "WHERE\n"
                    + "customer_register.barcode = '" + txt_findByDMTBarcode.getText() + "'");
            while (rs.next()) {
                txtname.setText(rs.getString(16));
                txtadmissiono.setText(rs.getString(17));
                int id = rs.getInt(1);
                String date = rs.getString(3);
                String a = rs.getString(4);
                String apass = rs.getString(5);
                String b = rs.getString(6);
                String bpass = rs.getString(7);
                String b1 = rs.getString(8);
                String b1pass = rs.getString(9);
                String g = rs.getString(10);
                String gpass = rs.getString(11);
                String d = rs.getString(12);
                String dpass = rs.getString(13);
                String ce = rs.getString(14);
                String cepass = rs.getString(15);

                Object o[] = {id, date, a, apass, b, bpass, b1, b1pass, g, gpass, d, dpass, ce, cepass};
                dtm.addRow(o);

            }

        } catch (Exception e) {
            e.printStackTrace();
        }

        try {
            ResultSet rs = model.db.getData("SELECT\n"
                    + "customer_register.id,\n"
                    + "uniquecustomerdetails.namewithinitial\n"
                    + "FROM\n"
                    + "customer_register\n"
                    + "INNER JOIN uniquecustomerdetails ON customer_register.uniqueCustomerDetails_id = uniquecustomerdetails.id\n"
                    + "WHERE\n"
                    + "customer_register.barcode = '" + txt_findByDMTBarcode.getText().trim() + "'");
            while (rs.next()) {
                txtname.setText(rs.getString(2));
                cusid = rs.getInt(1);

            }

        } catch (Exception e) {
            e.printStackTrace();

        }

        txtexamdate.grabFocus();
    }

    private void sendsms() {
       String tp = null;
        String datew = txtexamdate.getText();
        try {
            ResultSet rs = model.db.getData("SELECT\n"
                    + "customer_register.tp1\n"
                    + "FROM\n"
                    + "customer_register\n"
                    + "WHERE\n"
                    + "customer_register.admission_no = '"+txtadmissiono.getText()+"'");

            if (rs.next()) {
                tp = rs.getString(1);
              
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        String originalString = tp;
        originalString = originalString.substring(1);
        originalString = originalString.replaceAll("[-+.^:,]", "");
        String neworiginalString = "0094" + originalString;

        System.out.println(neworiginalString);

        try {
            // Construct data
            String apiKey = "apikey=" + "TRSJWOBd7x8-R02dI4i1Q6uuoZVkg4zRGCihxtBQH5";
            String message = "&message=" + "Your Trial date for Driving Licence is " + datew + " .Please be attend ontime. More info 0372223969. vijayalearners.com";
            String sender = "&sender=" + "Viajaya Learners";
            String numbers = "&numbers=" + neworiginalString;

            // Send data
            HttpURLConnection conn = (HttpURLConnection) new URL("https://api.txtlocal.com/send/?").openConnection();
            String data = apiKey + numbers + message + sender;
            conn.setDoOutput(true);
            conn.setRequestMethod("POST");
            conn.setRequestProperty("Content-Length", Integer.toString(data.length()));
            conn.getOutputStream().write(data.getBytes("UTF-8"));
            final BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            final StringBuffer stringBuffer = new StringBuffer();
            String line;
            while ((line = rd.readLine()) != null) {
                //stringBuffer.append(line);
                // JOptionPane.showMessageDialog(null, "message" + line);
            }
            rd.close();

            //return stringBuffer.toString();
        } catch (Exception e) {
            System.out.println("Error SMS " + e);
            //return "Error "+e;
            //  JOptionPane.showMessageDialog(null, e);
        }
    }

}
